"use strict";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2F2SW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDYXZJbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW50ZXJmYWNlIElNb3ZlT2xkUG9pbnQge1xuLy8gICB4OiBudW1iZXI7XG4vLyAgIHk6IG51bWJlcjtcbi8vIH1cblxuLy8gbW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDYXZJbWFnZSB7XG4vLyAgIGNhbnZhczogYW55O1xuLy8gICBjdHg6IGFueTtcbi8vICAgd3JhcHBlckN0eDogYW55O1xuXG4vLyAgIGltYWdlOiBhbnk7XG4vLyAgIGltYWdlSW5mbzogYW55O1xuLy8gICBjYXZJbWFnZTogYW55O1xuLy8gICBzeXN0ZW1JbmZvOiBhbnk7XG4vLyAgIGdsb2JhbEFscGhhOiBudW1iZXIgPSAwLjc7XG4vLyAgIG1vdmVPbGRQb2ludDogYW55ID0ge1xuLy8gICAgIHg6IDAsIHk6IDBcbi8vICAgfTtcbi8vICAgbW92ZUN1cnJlbnRQb2ludDogYW55ID0ge1xuLy8gICAgIHg6IDAsIHk6IDBcbi8vICAgfTtcbi8vICAgZGlzdGFuY2UgPSAwO1xuLy8gICBzY2FsZSA9IDE7XG4vLyAgIGNlbnRlclBvaW50ID0ge1xuLy8gICAgIHg6IDAsIHk6IDAsXG4vLyAgIH07XG5cbi8vICAgLy8g57uT5bGA5Lik5Liq5omL5oyHID0+IOS4gOS4quaJi+aMh+WQju+8jOmhtemdouaKluWKqOmXrumimFxuLy8gICB0b3VjaGVkRmluZ2VyTnVtID0gMDtcbi8vICAgaXNUb3cyT25lID0gZmFsc2U7XG5cbi8vICAgLy8g6KOB5YiH55qE6auY5bqmXG4vLyAgIGNsaXBCb3R0b20gPSAwO1xuXG4vLyAgIGxlZnRQb2ludFkgPSAwO1xuLy8gICByaWdodFBvaW50WSA9IDA7XG5cbi8vICAgcm90YXRlTnVtID0gMDtcblxuXG4vLyAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbi8vICAgcHVibGljIGNvbmZpZyh7XG4vLyAgICAgY2FudmFzLCBjdHgsIGltYWdlLCBjbGlwQm90dG9tLCB3cmFwcGVyQ3R4XG4vLyAgIH06IGFueSkge1xuLy8gICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuLy8gICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbi8vICAgICB0aGlzLmN0eCA9IGN0eDtcbi8vICAgICB0aGlzLnN5c3RlbUluZm8gPSB3eC5nZXRTeXN0ZW1JbmZvU3luYygpO1xuLy8gICAgIHRoaXMuY2xpcEJvdHRvbSA9IGNsaXBCb3R0b207XG4vLyAgICAgdGhpcy53cmFwcGVyQ3R4ID0gd3JhcHBlckN0eDtcbi8vICAgICB0aGlzLmxlZnRQb2ludFkgPSBjbGlwQm90dG9tO1xuLy8gICAgIHRoaXMucmlnaHRQb2ludFkgPSBjbGlwQm90dG9tO1xuLy8gICB9XG5cbi8vICAgcHVibGljIGFzeW5jIGluaXQoKSB7XG4vLyAgICAgLy8g6I635Y+WY2F25Zu+54mH5a+56LGhXG4vLyAgICAgYXdhaXQgdGhpcy5fbG9hZENhdkltYWdlKCk7XG5cbi8vICAgICAvLyDoo4Xovb3lm77niYfkv6Hmga/lr7nosaFcbi8vICAgICBhd2FpdCB0aGlzLl9sb2FkSW1hZ2VJbmZvKCk7XG4vLyAgIH1cblxuLy8gICBwdWJsaWMgc3RhcnREcmF3KGNsaXA6IGJvb2xlYW4pIHtcbi8vICAgICB0aGlzLmRyYXcoeyBjbGlwIH0pO1xuLy8gICB9XG5cbi8vICAgbW92ZVN0YXJ0KGU6IGFueSkge1xuLy8gICAgIHRoaXMudG91Y2hlZEZpbmdlck51bSA9IDE7XG5cbi8vICAgICB0aGlzLm1vdmVPbGRQb2ludCA9IHtcbi8vICAgICAgIHg6IGUudG91Y2hlc1swXS5jbGllbnRYLFxuLy8gICAgICAgeTogZS50b3VjaGVzWzBdLmNsaWVudFlcbi8vICAgICB9XG4vLyAgIH1cblxuLy8gICBtb3ZlKGU6IGFueSkge1xuLy8gICAgIGlmICh0aGlzLmlzVG93Mk9uZSkgcmV0dXJuO1xuXG4vLyAgICAgY29uc3QgZGlmZlggPSBlLnRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMubW92ZU9sZFBvaW50Lng7XG4vLyAgICAgY29uc3QgZGlmZlkgPSBlLnRvdWNoZXNbMF0uY2xpZW50WSAtIHRoaXMubW92ZU9sZFBvaW50Lnk7XG5cbi8vICAgICBsZXQgbW92ZWRYID0gdGhpcy5tb3ZlQ3VycmVudFBvaW50LnggKyBkaWZmWDtcbi8vICAgICBsZXQgbW92ZWRZID0gdGhpcy5tb3ZlQ3VycmVudFBvaW50LnkgKyBkaWZmWTtcblxuLy8gICAgIHRoaXMubW92ZUN1cnJlbnRQb2ludCA9IHtcbi8vICAgICAgIHg6IG1vdmVkWCxcbi8vICAgICAgIHk6IG1vdmVkWVxuLy8gICAgIH1cblxuLy8gICAgIHRoaXMubW92ZU9sZFBvaW50ID0ge1xuLy8gICAgICAgeDogZS50b3VjaGVzWzBdLmNsaWVudFgsXG4vLyAgICAgICB5OiBlLnRvdWNoZXNbMF0uY2xpZW50WVxuLy8gICAgIH1cblxuLy8gICAgIHRoaXMuZHJhdyh7IGNsaXA6IHRydWUgfSk7XG4vLyAgIH1cblxuLy8gICB6b29tU3RhcnQoZTogYW55KSB7XG4vLyAgICAgdGhpcy50b3VjaGVkRmluZ2VyTnVtID0gMjtcblxuLy8gICAgIGNvbnN0IHRvdWNoMCA9IGUudG91Y2hlc1swXTtcbi8vICAgICBjb25zdCB0b3VjaDEgPSBlLnRvdWNoZXNbMV07XG5cbi8vICAgICB0aGlzLmRpc3RhbmNlID0gdGhpcy5fY2FsY0Rpc3RhbmNlKHRvdWNoMCwgdG91Y2gxKTtcbi8vICAgICB0aGlzLmNlbnRlclBvaW50ID0ge1xuLy8gICAgICAgeDogKHRvdWNoMC5jbGllbnRYICsgdG91Y2gxLmNsaWVudFgpIC8gMixcbi8vICAgICAgIHk6ICh0b3VjaDAuY2xpZW50WSArIHRvdWNoMS5jbGllbnRZKSAvIDJcbi8vICAgICB9XG4vLyAgIH1cblxuLy8gICB6b29tTW92ZShlOiBhbnkpIHtcbi8vICAgICBjb25zdCB0b3VjaDAgPSBlLnRvdWNoZXNbMF07XG4vLyAgICAgY29uc3QgdG91Y2gxID0gZS50b3VjaGVzWzFdO1xuXG4vLyAgICAgLy8g5b2T5YmN5Lik5Liq5omL5oyH5LmL6Ze055qE6Led56a7XG4vLyAgICAgY29uc3QgZGlzdGFuY2UgPSB0aGlzLl9jYWxjRGlzdGFuY2UodG91Y2gwLCB0b3VjaDEpO1xuLy8gICAgIGNvbnN0IGRpc3RhbmNlRGlmZiA9IGRpc3RhbmNlIC0gdGhpcy5kaXN0YW5jZTtcblxuLy8gICAgIC8vIOiuoeeul+e8qeaUvuWAvFxuLy8gICAgIGxldCBuZXdTY2FsZSA9IHRoaXMuc2NhbGUgKyAwLjAwNSAqIGRpc3RhbmNlRGlmZjtcbi8vICAgICBpZiAobmV3U2NhbGUgPj0gMikge1xuLy8gICAgICAgbmV3U2NhbGUgPSAyO1xuLy8gICAgIH1cbi8vICAgICBpZiAobmV3U2NhbGUgPD0gMC42KSB7XG4vLyAgICAgICBuZXdTY2FsZSA9IDAuNjtcbi8vICAgICB9XG5cbi8vICAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4vLyAgICAgdGhpcy5zY2FsZSA9IG5ld1NjYWxlO1xuXG4vLyAgICAgdGhpcy5kcmF3KHsgY2xpcDogdHJ1ZSB9KTtcbi8vICAgfVxuXG4vLyAgIHRvdWNoRW5kKCkge1xuLy8gICAgIGlmICh0aGlzLnRvdWNoZWRGaW5nZXJOdW0gPT09IDIpIHtcbi8vICAgICAgIHRoaXMuaXNUb3cyT25lID0gdHJ1ZTtcbi8vICAgICB9IGVsc2UgaWYgKHRoaXMudG91Y2hlZEZpbmdlck51bSA9PT0gMSkge1xuLy8gICAgICAgdGhpcy5pc1RvdzJPbmUgPSBmYWxzZTtcbi8vICAgICB9XG4vLyAgICAgdGhpcy50b3VjaGVkRmluZ2VyTnVtIC09IDE7XG4vLyAgIH1cblxuLy8gICByb3RhdGUocm90YXRlTnVtOiBudW1iZXIgPSAwKSB7XG4vLyAgICAgdGhpcy5yb3RhdGVOdW0gKz0gOTA7XG5cbi8vICAgICBpZiAodGhpcy5yb3RhdGVOdW0gPT09IDM2MCkge1xuLy8gICAgICAgdGhpcy5yb3RhdGVOdW0gPSAwXG4vLyAgICAgfVxuXG4vLyAgICAgLy8g5Y6757uY5Yi2XG4vLyAgICAgdGhpcy5kcmF3KHtcbi8vICAgICAgIGNsaXA6IHRydWUsXG4vLyAgICAgICBpc1JvdGF0ZTogdHJ1ZVxuLy8gICAgIH0pXG4vLyAgIH1cblxuLy8gICBwdWJsaWMgZHJhdyh7XG4vLyAgICAgY2xpcCA9IGZhbHNlLFxuLy8gICAgIGlzUm90YXRlID0gZmFsc2Vcbi8vICAgfSkge1xuLy8gICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuLy8gICAgIGNvbnN0IHsgd2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCB9ID0gdGhpcy5zeXN0ZW1JbmZvO1xuLy8gICAgIGNvbnN0IHsgd2lkdGg6IGltYWdlQmFzZVdpZHRoLCBoZWlnaHQ6IGltYWdlQmFzZUhlaWdodCB9ID0gdGhpcy5pbWFnZUluZm87XG5cbi8vICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpO1xuLy8gICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuZ2xvYmFsQWxwaGE7XG5cbi8vICAgICBpZiAoY2xpcCkge1xuLy8gICAgICAgY3R4LnNhdmUoKTtcbi8vICAgICAgIHRoaXMuX2RyYXdQcmV2aWV3UmVjdChjdHgpO1xuLy8gICAgICAgY3R4LmNsaXAoKTtcbi8vICAgICB9XG5cbi8vICAgICBjb25zdCBzdGFydFggPSB0aGlzLmNlbnRlclBvaW50Lng7XG4vLyAgICAgY29uc3Qgc3RhcnRZID0gdGhpcy5jZW50ZXJQb2ludC55O1xuXG4vLyAgICAgLy8g55+p5b2i5YaF55qE5Lit5b+D54K55a696auYXG4vLyAgICAgY29uc3QgdyA9IHN0YXJ0WCAtIHRoaXMubW92ZUN1cnJlbnRQb2ludC54O1xuLy8gICAgIGNvbnN0IGggPSBzdGFydFkgLSB0aGlzLm1vdmVDdXJyZW50UG9pbnQueTtcblxuLy8gICAgIC8vIOW3puS4iuinkuWdkOagh1xuLy8gICAgIGNvbnN0IGR4ID0gc3RhcnRYIC0gdyAqIHRoaXMuc2NhbGVcbi8vICAgICBjb25zdCBkeSA9IHN0YXJ0WSAtIGggKiB0aGlzLnNjYWxlO1xuXG4vLyAgICAgLy8g5Zu+54mH55qE5a696auYXG4vLyAgICAgY29uc3QgaW1nVyA9IHRoaXMuc2NhbGUgKiAoaW1hZ2VCYXNlV2lkdGggfHwgMSk7XG4vLyAgICAgY29uc3QgaW1nSCA9IHRoaXMuc2NhbGUgKiAoaW1hZ2VCYXNlSGVpZ2h0IHx8IDEpO1xuXG4vLyAgICAgLy8g5peL6L2sXG4vLyAgICAgY29uc3QgaGFsZkltZ1cgPSBpbWdXIC8gMjtcbi8vICAgICBjb25zdCBoYWxmSW1nSCA9IGltZ0ggLyAyO1xuXG5cbi8vICAgICBjb25zb2xlLmxvZygnaGFsZkltZ1c6OjonLCBoYWxmSW1nVyk7XG4vLyAgICAgY29uc29sZS5sb2coJ2hhbGZJbWdIOjo6JywgaGFsZkltZ0gpO1xuXG4vLyAgICAgLy8gY3R4LnNhdmUoKTtcblxuLy8gICAgIC8vIC8vIC8vIOiuvue9ruWchuW/g+WIsOWbvueJh+S4reW/g1xuLy8gICAgIC8vIC8vIGN0eC50cmFuc2xhdGUoZHggKyBoYWxmSW1nVywgZHkgKyBoYWxmSW1nSCk7XG4vLyAgICAgLy8gLy8gY29uc29sZS5sb2coJ2R4Ojo6JywgZHgpO1xuLy8gICAgIC8vIC8vIGNvbnNvbGUubG9nKCdkeTo6OicsIGR5KTtcblxuLy8gICAgIC8vIC8vIGN0eC5hcmMoMCwgMCwgMTAsIDAsIDIgKiBNYXRoLlBJLCB0cnVlKTtcbi8vICAgICAvLyAvLyBjdHgucmVjdCgwLCAwLCBoYWxmSW1nVywgaGFsZkltZ0gpO1xuLy8gICAgIC8vIC8vIGN0eC5zdHJva2VTdHlsZSA9ICdyZWQnO1xuXG4vLyAgICAgLy8gY3R4LnRyYW5zbGF0ZShkeCArIGhhbGZJbWdXLCBkeSArIGhhbGZJbWdIKTtcbi8vICAgICAvLyBjdHgucm90YXRlKHRoaXMucm90YXRlTnVtICogTWF0aC5QSSAvIDE4MCk7XG5cbi8vICAgICAvLyBjdHguYXJjKGR4LCBkeSwgMTAsIDAsIDIgKiBNYXRoLlBJLCB0cnVlKTtcbi8vICAgICAvLyBjdHgucmVjdChkeCwgZHksIGhhbGZJbWdXLCBoYWxmSW1nSCk7XG4vLyAgICAgLy8gY3R4LnN0cm9rZVN0eWxlID0gJ3JlZCc7XG5cbi8vICAgICAvLyBjdHguc3Ryb2tlKCk7XG5cbi8vICAgICAvLyBjdHguZHJhd0ltYWdlKHRoaXMuY2F2SW1hZ2UsIGR4IC0gaGFsZkltZ1csIGR5IC0gaGFsZkltZ0gsIGltZ1csIGltZ0gpO1xuLy8gICAgIC8vIGN0eC5yZXN0b3JlKCk7XG5cbi8vICAgICAvLyBpZiAoaXNSb3RhdGUpIHtcbi8vICAgICAvLyAgIGN0eC5zYXZlKCk7XG4vLyAgICAgLy8gICBjdHgudHJhbnNsYXRlKDEwMCwgMTAwKTtcbi8vICAgICAvLyAgIGN0eC5yb3RhdGUoMjAgKiBNYXRoLlBJIC8gMTgwKTtcbi8vICAgICAvLyAgIGN0eC5kcmF3SW1hZ2UodGhpcy5jYXZJbWFnZSwgZHgsIGR5LCBpbWdXLCBpbWdIKTtcbi8vICAgICAvLyAgIGN0eC5yZXN0b3JlKCk7XG4vLyAgICAgLy8gfSBlbHNlIHtcbi8vICAgICAvLyAgIGN0eC5kcmF3SW1hZ2UodGhpcy5jYXZJbWFnZSwgZHgsIGR5LCBpbWdXLCBpbWdIKTtcbi8vICAgICAvLyB9XG5cbi8vICAgICAvLyBjdHgucmVzdG9yZSgpO1xuLy8gICB9XG5cbi8vICAgcHVibGljIGRyYXdDb3ZlcihsZWZ0WTogbnVtYmVyID0gdGhpcy5sZWZ0UG9pbnRZLCByaWdodFk6IG51bWJlciA9IHRoaXMucmlnaHRQb2ludFkpIHtcbi8vICAgICB0aGlzLmxlZnRQb2ludFkgPSBsZWZ0WTtcbi8vICAgICB0aGlzLnJpZ2h0UG9pbnRZID0gcmlnaHRZO1xuXG4vLyAgICAgY29uc3QgeyB3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0IH0gPSB0aGlzLnN5c3RlbUluZm87XG5cbi8vICAgICBjb25zdCBjdHggPSB0aGlzLndyYXBwZXJDdHg7XG5cbi8vICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpO1xuLy8gICAgIGN0eC5iZWdpblBhdGgoKTtcbi8vICAgICBjdHgubGluZVRvKHdpbmRvd1dpZHRoLCB0aGlzLnJpZ2h0UG9pbnRZKTtcbi8vICAgICBjdHgubGluZVRvKDAsIHRoaXMubGVmdFBvaW50WSk7XG4vLyAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4vLyAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmZmYnO1xuLy8gICAgIGN0eC5zdHJva2UoKTtcbi8vICAgICBjdHguY2xvc2VQYXRoKCk7XG4vLyAgIH1cblxuLy8gICBfZHJhd1ByZXZpZXdSZWN0KGN0eDogYW55LCBjb25maWc6IGFueSA9IHt9KSB7XG4vLyAgICAgY29uc3QgeyB3aW5kb3dXaWR0aCB9ID0gdGhpcy5zeXN0ZW1JbmZvO1xuLy8gICAgIGNvbnN0IHsgbGluZVdpZHRoLCBzdHJva2VTdHlsZSB9ID0gY29uZmlnO1xuXG4vLyAgICAgY3R4LmJlZ2luUGF0aCgpO1xuLy8gICAgIC8vIOW3puS4iuinkueCuVxuLy8gICAgIGN0eC5tb3ZlVG8oMCwgMCk7XG4vLyAgICAgLy8g5Y+z5LiK6KeS54K5XG4vLyAgICAgY3R4LmxpbmVUbyh3aW5kb3dXaWR0aCwgMCk7XG4vLyAgICAgLy8g5Y+z5LiL6KeS54K5XG4vLyAgICAgY3R4LmxpbmVUbyh3aW5kb3dXaWR0aCwgdGhpcy5yaWdodFBvaW50WSk7XG4vLyAgICAgLy8g5bem5LiL6KeS54K5XG4vLyAgICAgY3R4LmxpbmVUbygwLCB0aGlzLmxlZnRQb2ludFkpO1xuLy8gICAgIC8vIOi+ueahhiAg6K6p5oiR556F556F5L2g55qE54mZXG4vLyAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aCA/IGxpbmVXaWR0aCA6IDE7XG4vLyAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGUgPyBzdHJva2VTdHlsZSA6ICdyZ2JhKDAsMCwwLDEpJztcbi8vICAgICBjdHguc3Ryb2tlKCk7XG4vLyAgICAgY3R4LmNsb3NlUGF0aCgpO1xuLy8gICB9XG5cblxuLy8gICBwcml2YXRlIF9sb2FkQ2F2SW1hZ2UoKSB7XG4vLyAgICAgY29uc3QgaW1nID0gdGhpcy5jYW52YXMuY3JlYXRlSW1hZ2UoKTtcbi8vICAgICBpbWcuc3JjID0gdGhpcy5pbWFnZTtcblxuLy8gICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbi8vICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4vLyAgICAgICAgIHRoaXMuY2F2SW1hZ2UgPSBpbWc7XG4vLyAgICAgICAgIHJlc29sdmUoaW1nKTtcbi8vICAgICAgIH1cbi8vICAgICB9KVxuLy8gICB9XG5cbi8vICAgcHJpdmF0ZSBhc3luYyBfbG9hZEltYWdlSW5mbygpIHtcbi8vICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGF3YWl0IHRoaXMuX2dldEltYWdlSW5mbygpO1xuLy8gICAgIHRoaXMuaW1hZ2VJbmZvID0ge1xuLy8gICAgICAgd2lkdGgsIGhlaWdodFxuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIHByaXZhdGUgX2dldEltYWdlSW5mbygpOiBQcm9taXNlPHtcbi8vICAgICB3aWR0aDogbnVtYmVyO1xuLy8gICAgIGhlaWdodDogbnVtYmVyXG4vLyAgIH0+IHtcbi8vICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4vLyAgICAgICAvLyDojrflj5blm77niYfkv6Hmga9cbi8vICAgICAgIHd4LmdldEltYWdlSW5mbyh7XG4vLyAgICAgICAgIHNyYzogdGhpcy5pbWFnZSxcbi8vICAgICAgICAgc3VjY2VzczogKHJlcykgPT4ge1xuLy8gICAgICAgICAgIHJlc29sdmUocmVzKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgfSlcbi8vICAgICB9KVxuLy8gICB9XG5cbi8vICAgX2NhbGNEaXN0YW5jZSh0b3VjaDA6IGFueSwgdG91Y2gxOiBhbnkpIHtcbi8vICAgICBjb25zdCB4TW92ZSA9IHRvdWNoMS5jbGllbnRYIC0gdG91Y2gwLmNsaWVudFg7XG4vLyAgICAgY29uc3QgeU1vdmUgPSB0b3VjaDEuY2xpZW50WSAtIHRvdWNoMC5jbGllbnRZO1xuXG4vLyAgICAgLy8g6K6w5b2V5pyA5Yid55qE5Lik5Liq5omL5oyH6Ze055qE5Yy66Ze05YC8XG4vLyAgICAgcmV0dXJuIE1hdGguc3FydCh4TW92ZSAqIHhNb3ZlICsgeU1vdmUgKiB5TW92ZSk7XG4vLyAgIH1cbi8vIH07Il19